#----------------------------------------------------------------------
#     Document Title: Example-monitors-windows.cfg
#            Subject: SPEC Example Config File for 
#                     Using Monitoring Hooks on Windows
#       Last Updated: 6 May 2011 cds
# 
# This configuration file has been tested with Microsoft Visual C++
# 2008.  VC++ does not support Fortran or C99, so not all benchmarks
# can be built, and neither suite is completely runnable.  The default
# runlist in this config file has been modified to deselect unbuildable
# benchmarks.
# This was originally tested using SPEC CPU2006 with Windows XP in a VirtualBox 
# VM running on a v4.0.1, build 5363 and Mac OS X v10.4.10 running on a 
# quad-core 2.3GHz MacBook Pro system with 8GB RAM.  It should work
# similarly for SPEC OMP2012.
#----------------------------------------------------------------------

ext                   = example-monitors
tune                  = base
basepeak              = yes
output_format         = text
runlist               = all_c, all_cpp, ^libquantum
command_add_redirect  = yes
flagsurl              = $[top]/config/flags/Example-visualstudio.xml

#----------------------------------------------------------------------
# Monitoring hooks
#----------------------------------------------------------------------

# The commands below obviously don't do anything useful in regards to
# instrumenting runs.  They're just present to show what monitoring
# hooks exist and where they're executed.  Look in the log file
# to see where the output falls.  Run with '-v 35' (or 'verbose=35'
# in the config file) to see which variable substitutions are available
# for each command.

# You could use *_pre and *_post to start, stop, and process a system-
# wide trace facility.

# These cover the whole runspec invocation
monitor_pre      = echo "monitor_pre"
monitor_post     = echo "monitor_post"

default:
# These cover an entire individual benchmark run, which may consist
# of more than one binary invocation but will not include output
# validation.
monitor_pre_bench   = echo "monitor_pre_bench $[top]"
monitor_post_bench  = echo "monitor_post_bench"

# These cover build of an individual benchmark.
build_pre_bench     = echo "build_pre_bench"
build_post_bench    = echo "build_post_bench"

# monitor_wrapper is used to wrap a single invocation of a benchmark
# binary.  So if a particular run runs the benchmark binary three
# times, monitor_*_bench will be called once, and monitor_wrapper
# three times.  Here we separate the various commands out line-by-
# line, and the tools reassemble them for us.  It's also possible
# to do it all on one line, but I think that it's clearer this way.
# Note that without the command_add_redirect setting above, the
# monitor_wrapper output would be intermixed with the benchmark
# output and cause validation errors.
monitor_wrapper00 = echo monitor_wrapper
monitor_wrapper01 = $command

#----------------------------------------------------------------------
# Compiler secton
#----------------------------------------------------------------------
default:
CC	= cl
CXX	= cl -EHsc
CLD	= link
CXXLD	= link
FC	= 

# Increased stack reserve required for xalancbmk
LDOPT = /STACK:10000000
LDOUT = /OUT:$@.exe

#----------------------------------------------------------------------
# Optimization Settings
#----------------------------------------------------------------------
default=base:
OPTIMIZE	= -Zi -Ox -GL -GS- -D_SECURE_SCL=0
EXTRA_LDFLAGS	= -ltcg -debug -opt:icf,ref -incremental:no

#----------------------------------------------------------------------
# Portability Flags
#----------------------------------------------------------------------
#
