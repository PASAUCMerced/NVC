<?xml version="1.0"?>
<!DOCTYPE flagsdescription SYSTEM "http://www.spec.org/dtd/cpuflags2.dtd">
<flagsdescription>

<!-- filename to begin with "Intel-ic12-win32-revD" -->
<filename>Intel-ic12-win32-revD.xml</filename>

<title>SPEC CPU2006 Flag Description for the Intel(R) C++ and Fortran Compiler Professional 12 </title>
<header>
<![CDATA[
<p style="text-align: left; color: red; font-size: larger; background-color: black">
 Copyright &copy; 2006 Intel Corporation.  All Rights Reserved.</p>
]]>
</header>


<!--
******************************************************************************************************
* Compilers
******************************************************************************************************
-->

<flag name="intel_icc_vc10" class="compiler" regexp="icl -Qvc10(?=\s|$)">

   <![CDATA[
      <p>Invoke the Intel C/C++ compiler for IA32 applications in Visual Studio 2010 compatibility mode</p>
   ]]>

</flag>

<flag name="intel_icc_vc9" class="compiler" regexp="icl -Qvc9(?=\s|$)">

   <![CDATA[
      <p>Invoke the Intel C/C++ compiler for IA32 applications in Visual Studio 2008 compatibility mode</p>
   ]]>

</flag>

<flag name="intel_icc_vc8" class="compiler" regexp="icl -Qvc8(?=\s|$)">

   <![CDATA[
      <p>Invoke the Intel C/C++ compiler for IA32 applications in Visual Studio 2005 compatibility mode</p>
   ]]>

</flag>


<flag name="intel_ifort" class="compiler" regexp="(?:/\S+/)?ifort(?=\s|$)">
      Invoke the Intel Fortran compiler for IA32 applications
</flag>


<flag name="intel_compiler_c99_mode" class="compiler" regexp="(?:/\S+/)?-Qstd=c99(?=\s|$)">
      Invoke the Intel C/C++ compiler in C99 mode
</flag>



<flag name="intel_icc_64bit" class="compiler" regexp="C:/Program.*intel64/icl.exe(?=\s|$)">

   <![CDATA[
      <p>Invoke the Intel C/C++ compiler for Intel 64 applications</p>
   ]]>

</flag>


<flag name="intel_compiler_64bit_lib_dir" class="other" regexp="-link -LIBPATH:C:/Program Files.*/ComposerXE-2011/compiler/lib/intel64(?=\s|$)">

   <![CDATA[
      <p>Location of the Intel 64 version of the Intel Compiler libraries</p>
   ]]>

</flag>

<flag name="ms_vs_compiler_lib_dir" class="other" regexp="-link -LIBPATH:C:/Program Files \(x86\)/Microsoft Visual Studio 9.0/VC/lib(?=\s|$)">

   <![CDATA[
      <p>Location of the Microsoft Visual Studio libraries</p>
   ]]>

</flag>

<flag name="ms_vs_compiler_64bit_lib_dir" class="other" regexp="-link -LIBPATH:C:/Program Files \(x86\)/Microsoft Visual Studio 9.0/VC/lib/AMD64(?=\s|$)">

   <![CDATA[
      <p>Location of the 64-bit versions of the Microsoft Visual Studio libraries</p>
   ]]>

</flag>


<flag name="ms_vs_compiler_additional_lib_dir" class="other" regexp="-link -LIBPATH:C:/Program Files \(x86\)/Microsoft SDKs/Windows/v7.0A/lib/x64(?=\s|$)">

   <![CDATA[
      <p>Location of additional Microsoft Visual Studio libraries</p>
   ]]>

</flag>




<!--
******************************************************************************************************
* Portability
******************************************************************************************************
-->
<flag name="lowercase_routine_name" class="portability" regexp="(?:/\S+/)?.Qlowercase(?=\s|$)">

   <![CDATA[
      <p>For mixed-language benchmarks, tell the compiler to convert routine names to 
      lowercase for compatibility</p>
   ]]>

</flag>

<flag name="add-underscore_to_routine_name" class="portability" regexp="(?:/\S+/)?\/assume\:underscore(?=\s|$)">

   <![CDATA[
      <p>For mixed-language benchmarks, tell the compiler to assume that routine 
      names end with an underscore</p>
   ]]>

</flag>

<flag name="assume_cplusplus_sources" class="portability" regexp="(?:/\S+/)?\/TP(?=\s|$)">
      Tell the compiler to treat source files as C++ regardless of the file extension
</flag>

<!--
******************************************************************************************************
* Optimizations
******************************************************************************************************
-->
<flag name="f-O1" class="optimization" regexp="-O1(?=\s|$)">
      
   <![CDATA[
      <p>Enables optimizations for speed and disables some optimizations that <br />
         increase code size and affect speed. <br />
         To limit code size, this option: <br />
         - Enables global optimization; this includes data-flow analysis, 
           code motion, strength reduction and test replacement, split-lifetime
           analysis, and instruction scheduling. <br />
         - Disables intrinsic recognition and intrinsics inlining. <br />

         The O1 option may improve performance for applications with very large 
         code size, many branches, and execution time not dominated by code within loops. <br />
         
         On IA-32 Windows platforms, -O1 sets the following:</p>
         <p style="margin-left: 25px">
         /Qunroll0, /Oi-, /Op-, /Oy, /Gy, /Os, /GF (/Qvc7 and above), 
         /Gf (/Qvc6 and below), /Ob2, and /Og</p>
   ]]>

   <include flag="f-Qunroll"/>
   <include flag="f-Oi-"/>
   <include flag="f-Op-"/>
   <include flag="f-Oy"/>
   <include flag="f-Gy"/>
   <include flag="f-Os"/>
   <include flag="f-GF"/>
   <include flag="f-Gf"/>
   <include flag="f-Ob_n"/>
   <include flag="f-Og"/>
   
</flag>

<flag name="f-O2" class="optimization" regexp="-O2(?=\s|$)">

   <![CDATA[
      <p>Enables optimizations for speed. This is the generally recommended 
      optimization level. This option also enables: <br />
      - Inlining of intrinsics<br />
      - Intra-file interprocedural optimizations, which include: <br />
        - inlining<br />
        - constant propagation<br />
        - forward substitution<br />
        - routine attribute propagation<br />
        - variable address-taken analysis<br />
        - dead static function elimination<br />
        - removal of unreferenced variables<br />
      - The following capabilities for performance gain: <br /> 
        - constant propagation<br />
        - copy propagation<br />
        - dead-code elimination<br />
        - global register allocation<br />
        - global instruction scheduling and control speculation<br />
        - loop unrolling<br />
        - optimized code selection<br />
        - partial redundancy elimination<br />
        - strength reduction/induction variable simplification<br />
        - variable renaming<br />
        - exception handling optimizations<br />
        - tail recursions<br />
        - peephole optimizations<br />
        - structure assignment lowering and optimizations<br />
        - dead store elimination<br />
      </p>

      <p>On IA-32 Windows platforms, -O2 sets the following:</p>
         <p style="margin-left: 25px">
         /Og, /Oi-, /Os, /Oy, /Ob2, /GF (/Qvc7 and above), /Gf (/Qvc6 
         and below), /Gs, and /Gy.</p>
   ]]> 

   <include flag="f-Oi-"/>
   <include flag="f-Gs"/>
   <include flag="f-Oy"/>
   <include flag="f-Gy"/>
   <include flag="f-Os"/>
   <include flag="f-GF"/>
   <include flag="f-Gf"/>
   <include flag="f-Ob_n"/>
   <include flag="f-Og"/>
   <include flag="f-O1"/> 
</flag>

<flag name="f-O3" class="optimization" regexp="-O3(?=\s|$)">

   <![CDATA[
      <p>Enables O2 optimizations plus more aggressive optimizations, 
         such as prefetching, scalar replacement, and loop and memory 
         access transformations. Enables optimizations for maximum speed,   
         such as: <br />
         - Loop unrolling, including instruction scheduling<br />
         - Code replication to eliminate branches<br />
         - Padding the size of certain power-of-two arrays to allow 
           more efficient cache use.<br />
         On IA-32 and Intel EM64T processors, when O3 is used with options 
         -ax or -x (Linux) or with options /Qax or /Qx (Windows), the compiler 
         performs more aggressive data dependency analysis than for O2, which 
         may result in longer compilation times. <br />
         The O3 optimizations may not cause higher performance unless loop and 
         memory access transformations take place. The optimizations may slow 
         down code in some cases compared to O2 optimizations.  <br />
         The O3 option is recommended for applications that have loops that heavily 
         use floating-point calculations and process large data sets. On IA-32 
         Windows platforms, -O3 sets the following:</p>
         <p style="margin-left: 25px">
         /GF (/Qvc7 and above), /Gf (/Qvc6 and below), and /Ob2</p>
   ]]> 

   <include flag="f-GF"/>
   <include flag="f-Gf"/>
   <include flag="f-Ob_n"/>
   <include flag="f-O2"/>

</flag>

<flag name="f-Qunroll" class="optimization" regexp="-Qunroll(\d+)(?=\s|$)">
<example>-Qunroll&lt;n&gt;</example> 
This option sets the maximum number of times a loop can be unrolled, to $1.

<ex_replacement> n. For example, -unroll1 will unroll loops just once. To disable loop unrolling, use -unroll0. </ex_replacement>

</flag>

<flag name="f-Qip" class="optimization" regexp="-Qip(?=\s|$)">
This option enables additional interprocedural optimizations for single 
file compilation. These optimizations are a subset of full intra-file 
interprocedural optimizations. One of these optimizations enables the 
compiler to perform inline function expansion for calls to functions 
defined within the current source file.
</flag>

<flag name="f-Qipo" class="optimization" regexp="-Qipo(?=\s|$)">
   <![CDATA[
      <p>Multi-file ip optimizations that includes:<br />
       - inline function expansion<br />
       - interprocedural constant propogation<br />
       - dead code elimination<br />
       - propagation of function characteristics<br />
       - passing arguments in registers<br />
       - loop-invariant code motion</p>
   ]]> 
</flag>

<flag name="f-fast" class="optimization" regexp="-fast(?=\s|$)">

   <![CDATA[
      <p>The -fast option enhances execution speed across the entire program 
      by including the following options that can improve run-time performance:</p>

      <p style="text-indent: -45px;margin-left: 45px">
      -O3&nbsp;&nbsp;&nbsp;(maximum speed and high-level optimizations)</p>
      <p style="text-indent: -45px;margin-left: 45px"> 
      -Qipo&nbsp;(enables interprocedural optimizations across files)</p>
      <p style="text-indent: -45px;margin-left: 45px">  
      -QxSSSE3&nbsp;&nbsp;(generate code specialized for Intel(R) Core(TM)2 Duo processors, Intel(R) Core(TM)2 Quad processors 
                      and  Intel(R) Xeon(R) processors with SSSE3)</p>
      <p style="text-indent: -45px;margin-left: 45px"> 
      -Qprec-div-&nbsp;(disable -prec-div)
             where -Qprec-div improves precision of FP divides (some speed impact)</p>
   
      <p>To override one of the options set by /fast, specify that option after the 
      -fast option on the command line. The exception is the xT or QxT option
      which can't be overridden. The options set by /fast may change from 
      release to release.</p>
   ]]> 

   <include flag="f-O3"/>
   <include flag="f-Qipo"/>
   <include flag="f-QxSSSE3"/>
   <include flag="f-Qprec-div-"/>
</flag>

<flag name="f-static" class="compiler" regexp="-static(?=\s|$)">
         	 Compiler option to statically link in libraries at link time
</flag>

<flag name="f-QxHost" class="optimization" regexp="(?i)-QxHost(?=\s|$)">

   <![CDATA[
      <p>This option tells the compiler to generate instructions for the highest instruction set available on the compilation host processor. 
         The instructions generated by Host differ depending on the compilation host processor.
      </p>
   ]]>

</flag>

<flag name="f-QxAVX" class="optimization" regexp="-QxAVX(?=\s|$)">

   <![CDATA[

      <p>Code is optimized for Intel(R) processors with support for AVX instructions.
      The resulting code may contain unconditional use of features that are not supported
      on other processors. This option also enables new optimizations in addition to
      Intel processor-specific optimizations including advanced data layout and code
      restructuring optimizations to improve memory accesses for Intel processors.</p>

      <p> Do not use this option if you are executing a program on a processor that
      is not an Intel processor. If you use this option on a non-compatible processor
      to compile the main program (in Fortran) or the function main() in C/C++, the
      program will display a fatal run-time error if they are executed on unsupported
      processors. </p>

   ]]>

</flag>

<flag name="f-QxSSE42" class="optimization" regexp="-QxSSE4.2(?=\s|$)">

   <![CDATA[

      <p>Code is optimized for Intel(R) processors with support for SSE 4.2 instructions.
      The resulting code may contain unconditional use of features that are not supported
      on other processors. This option also enables new optimizations in addition to
      Intel processor-specific optimizations including advanced data layout and code
      restructuring optimizations to improve memory accesses for Intel processors.</p>

      <p> Do not use this option if you are executing a program on a processor that
      is not an Intel processor. If you use this option on a non-compatible processor
      to compile the main program (in Fortran) or the function main() in C/C++, the
      program will display a fatal run-time error if they are executed on unsupported
      processors. </p>

   ]]>

</flag>

<flag name="f-QxSSE41" class="optimization" regexp="-QxSSE4.1(?=\s|$)">

   <![CDATA[

      <p>Code is optimized for Intel(R) processors with support for SSE 4.1 instructions.
      The resulting code may contain unconditional use of features that are not supported
      on other processors. This option also enables new optimizations in addition to
      Intel processor-specific optimizations including advanced data layout and code
      restructuring optimizations to improve memory accesses for Intel processors.</p>

      <p> Do not use this option if you are executing a program on a processor that
      is not an Intel processor. If you use this option on a non-compatible processor
      to compile the main program (in Fortran) or the function main() in C/C++, the
      program will display a fatal run-time error if they are executed on unsupported
      processors. </p>

   ]]>

</flag>

<flag name="f-QxSSSE3" class="optimization" regexp="-QxSSSE3(?=\s|$)">

   <![CDATA[

      <p>Code is optimized for Intel(R) processors with support for Supplemental SSE 3 instructions.
      The resulting code may contain unconditional use of features that are not supported
      on other processors. This option also enables new optimizations in addition to
      Intel processor-specific optimizations including advanced data layout and code
      restructuring optimizations to improve memory accesses for Intel processors.</p>

      <p> Do not use this option if you are executing a program on a processor that
      is not an Intel processor. If you use this option on a non-compatible processor
      to compile the main program (in Fortran) or the function main() in C/C++, the
      program will display a fatal run-time error if they are executed on unsupported
      processors. </p>

   ]]>

</flag>

<flag name="f-archSSE2" class="optimization" regexp="/arch:SSE2(?=\s|$)">

    <![CDATA[       
      <p>Code is optimized for Intel Pentium 4 and compatible processors
      that supporting Streaming SIMD Extensions 2; this is the default for Intel EM64T systems. 
      The resulting code may contain unconditional use of features that are not supported on 
      other processors. </p>
    ]]> 
  
</flag>

<flag name="f-archSSE3" class="optimization" regexp="/arch:SSE3(?=\s|$)">

    <![CDATA[       
      <p>Code is optimized for the Intel(R) Core(TM) processor family. Code is expected to run properly on any processor that supports SSE3, SSE2 and SSE
      instruction sets </p>
    ]]> 
  
</flag>

<flag name="f-Qparallel" class="optimization" regexp="-Qparallel\b" parallel="yes">

    <![CDATA[       
      <p>Tells the auto-parallelizer to generate multithreaded code for loops that can be safely executed in parallel.
      To use this option, you must also specify option O2 or O3. The default numbers of threads spawned is equal to 
      the number of processors detected in the system where the binary is compiled. Can be changed by setting the 
      environment variable OMP_NUM_THREADS </p>
     
    ]]> 
  
</flag>

<flag name="f-Qscalar-rep" class="optimization" regexp="-Qscalar-rep.">

    <![CDATA[       
      <p> This option enables scalar replacement performed during loop transformation. To use this option, you must also specify O3.
          -Qscalar-rep- disables this optimization.
            </p>
     
    ]]> 
  
</flag>

<flag name="f-Oa" class="optimization" regexp="-Oa(?=\s|$)">

    <![CDATA[       
      <p>Tells the compiler to assume there is no aliasing.</p>
     
    ]]> 
  
</flag>


<flag name="f-Qprec-div-" class="optimization" regexp="-Qprec-div-">
(disable/enable[default] -prec-div)
                
   <![CDATA[
      <p>-Qprec-div- enables optimizations that give slightly less precise results 
         than full IEEE division. </p>

      <p>When you specify -Qprec-div- along with some optimizations, such as 
         /QxT, the compiler may change floating-point division computations into 
         multiplication by the reciprocal of the denominator. 
         For example, A/B is computed as A * (1/B) to improve the speed of the 
         computation.</p>
      <p>However, sometimes the value produced by this transformation is 
         not as accurate as full IEEE division. When it is important to have fully 
         precise IEEE division, do not use -Qprec-div- which will enable the 
         default -Qprec-div and the result is more accurate, with some loss of 
         performance.</p>
   ]]> 

</flag>


<flag name="Qprof_gen" class="optimization" regexp="-Qprof_gen(?=\s|$)">

   <![CDATA[
      <p>Instrument program for profiling for the first phase of
      two-phase profile guided otimization. This instrumentation gathers information
      about a program's execution paths and data values but does not gather
      information from hardware performance counters. The profile instrumentation
      also gathers data for optimizations which are unique to profile-feedback
      optimization.</p>
   ]]> 

</flag>

<flag name="Qprof_use" class="optimization" regexp="-Qprof_use(?=\s|$)">

   <![CDATA[
      <p>Instructs the compiler to produce a profile-optimized 
      executable and merges available dynamic information (.dyn) 
      files into a pgopti.dpi file. If you perform multiple 
      executions of the instrumented program, -prof-use merges 
      the dynamic information files again and overwrites the 
      previous pgopti.dpi file.<br />
      Without any other options, the current directory is 
      searched for .dyn files</p>
   ]]> 
      
</flag>

<flag name="link_force_multiple1" class="optimization" regexp="\b\-Fe\$\@\-link(?=\s|$)">

   <![CDATA[
      <p>Enable SmartHeap and/or other library usage by forcing the linker to 
      ignore multiple definitions if present</p>
   ]]> 
 
</flag>

<flag name="link_force_multiple2" class="optimization" regexp=".*FORCE.*MULTIPLE(?=\s|$)">

   <![CDATA[
      <p>Enable SmartHeap library usage by forcing the linker to 
      ignore multiple definitions</p>
   ]]> 
 
</flag>

<flag name="SmartHeap32" class="optimization" regexp="shl.*32.*(?=\s|$)">

   <![CDATA[
      <p>MicroQuill SmartHeap Library v9.01 available from http://www.microquill.com/</p>
   ]]> 

</flag>

<flag name="SmartHeap64" class="optimization" regexp="shl.*64.*(?=\s|$)">

   <![CDATA[
      <p>MicroQuill SmartHeap Library v8.1 available from http://www.microquill.com/</p>
   ]]> 

</flag>

<flag name="f-no_wchar_t_keyword" class="portability" regexp="-Qoption,cpp,--no_wchar_t_keyword(?=\s|$)">

<![CDATA[
 <p>-Qoption,<i>string</i>,<i>options</i>&nbsp;&nbsp;&nbsp; This option
            passes options to a specified tool.
         </p>
         <p><i>string</i>&nbsp;&nbsp;&nbsp; Is the name of the tool.<br/>
            Here: cpp indicates the C++ preprocessor.
         </p>
         <p><i>options</i>&nbsp;&nbsp;&nbsp; Are one or more comma-separated,
            valid options for the designated tool.<br/>
            Here: --no_wchar_t_keyword is passed to C++ preprocessor to provide
            the information that there is no wchar_t keyword.
         </p>
         <p>This flag must be used with Microsoft Visual Studio 2005.<br/>
            It avoids syntax errors coming from the use of wchar_t in 483.xalancbmk.
         </p>
]]> 

</flag>

<flag name="f-Qcxx_features" class="optimization" regexp="-Qcxx-features(?=\s|$)">

   <![CDATA[
      <p>Enable C++ Exception Handling and RTTI<br />
      This option has the same effect as specifying /GX /GR.</p>
   ]]> 

<include flag="f-GX"/>
<include flag="f-GR"/>
 
</flag>

<flag name="f-GX" class="optimization" regexp="-GX(?=\s|$)">
      This option enables C++ exception handling.    
</flag>

<flag name="f-GR" class="optimization" regexp="-GR(?=\s|$)">
      Enables C++ Run Time Type Information (RTTI).    
</flag>


<flag name="set_stack_space" class="optimization" regexp="(?:/\S+/)?/F\d*">
      set the stack reserve amount specified to the linker 
</flag>

<flag name="f-Qansi-alias" class="optimization" regexp="-Qansi-alias(?=\s|$)">
      Enable/disable(DEFAULT) use of ANSI aliasing rules in
      optimizations; user asserts that the program adheres to
      these rules. 
</flag>

<flag name="f-Qprefetch" class="optimization" regexp="-Qopt-prefetch(?=\s|$)">
      This option enables or disables prefetch insertion optimization. The goal of prefetching 
      is to reduce cache misses by providing hints to the processor about when data should be 
      loaded into the cache.
</flag>

<flag name="f-Qinline-calloc" class="optimization" regexp="-Qinline-calloc(?=\s|$)">
      Directs the compiler to inline calloc() calls as malloc()/memset()
</flag>

<flag name="f-Qopt-streaming-stores-always" class="optimization" regexp="-Qopt-streaming-stores.always(?=\s|$)">
   <![CDATA[
      This option enables generation of streaming stores for optimization. This method stores data with 
      instructions that use a non-temporal buffer, which minimizes memory hierarchy pollution:
      <ul>
      <li>always - enables generation of streaming stores under the assumption that the application is memory bound</li>
      <li>auto   - compiler decides when streaming stores are used (DEFAULT)</li>
      <li>never  - disables generation of streaming stores</li>
      </ul>
   ]]>
</flag>

<flag name="f-Qvec-guard-write" class="optimization" regexp="-Qvec-guard-write(?=\s|$)">
      Enables cache/bandwidth optimization for stores under conditionals (within vector loops)
      This option tells the compiler to perform a conditional check in a vectorized loop. 
      This checking avoids unnecessary stores and may improve performance by conserving bandwidth.
</flag>


<flag name="f-Qpar-runtime-control" class="optimization" regexp="-Qpar-runtime-control(?=\s|$)">
      Enable compiler to generate runtime control code for effective automatic parallelization.
      
      This option generates code to perform run-time checks for loops that have symbolic loop bounds. 
      If the granularity of a loop is greater than the parallelization threshold, the loop will be 
      executed in parallel. If you do not specify this option, the compiler may not parallelize loops 
      with symbolic loop bounds if the compile-time granularity estimation of a loop can not ensure 
      it is beneficial to parallelize the loop.
</flag>

<flag name="f-Qopt-ra-region-strategy-block" class="optimization" regexp="-Qopt-ra-region-strategy.block(?=\s|$)">
   <![CDATA[
      <p>Select the method that the register allocator uses to partition
      each routine into regions</p>
      <ul>
      <li>routine - one region per routine</li>
      <li>block - one region per block</li>
      <li>trace - one region per trace</li> 
      <li>loop - one region per loop</li>
      <li>default - compiler selects best option</li>
      </ul>
   ]]>
</flag>


<flag name="f-Qopt-ra-region-strategy-routine" class="optimization" regexp="-Qopt-ra-region-strategy.routine(?=\s|$)">
   <![CDATA[
      <p>Select the method that the register allocator uses to partition
      each routine into regions</p>
      <ul>
      <li>routine - one region per routine</li>
      <li>block - one region per block</li>
      <li>trace - one region per trace</li> 
      <li>loop - one region per loop</li>
      <li>default - compiler selects best option</li>
      </ul>
   ]]>
</flag>

<flag name="f-Qopt-multi-version-aggressive" class="optimization" regexp="-Qopt-multi-version-aggressive(?=\s|$)">
      Multi-versioning is used for generating different versions of the loop based on  run time dependence testing,  
      alignment and checking for short/long trip counts.  If this option is turned on, it will trigger more versioning 
      at the expense of creating more overhead to check for pointer aliasing and scalar replacement.
</flag>

<flag name="f-Qunroll-aggressive" class="optimization" regexp="-Qunroll-aggressive(?=\s|$)">
      Enables more aggressive unrolling heuristics
</flag>

<flag name="f-Qauto-ilp32" class="optimization" regexp="-Qauto-ilp32">
   <![CDATA[
      <p> This option instructs the compiler to analyze and transform the program so that 64-bit pointers 
          are shrunk to 32-bit pointers wherever it is legal and safe to do so. In order for this option to 
          be effective the compiler must be able to optimize using the -Qipo option and must be able to 
          analyze all library/external calls the program makes.
      </p>
      <p> This option requires that the size of the program executable never exceed 2^32 bytes and all 
          data values can be represented within 32 bits. If the program can run correctly in a 32-bit system, 
          these requirements are implicitly satisfied. If the program violates these size restrictions, 
          unpredictable behavior might occur.
      </p>

   ]]> 
</flag>

<flag name="f-Qauto" class="optimization" regexp="-Qauto">
   <![CDATA[
      <p>This option places local variables, except those declared as SAVE, to the run-time stack. 
      It is as if the variables were declared with the AUTOMATIC attribute. </p>

      <p> It does not affect variables that have the SAVE attribute or ALLOCATABLE attribute, 
      or variables that appear in an EQUIVALENCE statement or in a common block. </p>

      <p>This option may provide a performance gain for your program, but if your program depends on 
      variables having the same value as the last time the routine was invoked, your program may not 
      function properly. </p>

      <p> If you want to cause variables to be placed in static memory, specify /Qsave (Windows). </p>
   ]]> 
</flag>


<flag name="f-Oi-" class="optimization" regexp="-Oi-">
      Disables inline expansion of all intrinsic functions. 
</flag>

<flag name="f-Op-" class="optimization" regexp="-Op-(?=\s|$)">

   <![CDATA[
      <p>Disables conformance to the ANSI C and IEEE 754 standards for 
      floating-point arithmetic.</p>
   ]]> 
 
</flag>

<flag name="f-Oy" class="optimization" regexp="-Oy(?=\s|$)">
      Allows use of EBP as a general-purpose register in optimizations.  
</flag>

<flag name="f-Os" class="optimization" regexp="-Os(?=\s|$)">

   <![CDATA[
      <p>This option enables most speed optimizations, but disables some 
      that increase code size for a small speed benefit.</p>
   ]]> 
  
</flag>

<flag name="f-Og" class="optimization" regexp="-Og(?=\s|$)">
      This option enables global optimizations.  
</flag>

<flag name="f-Ob_n" class="optimization" regexp="-Ob(0|1|2)(?=\s|$)">

   <![CDATA[
      <p>Specifies the level of inline function expansion.</p>
         
         <p style="text-indent: -45px;margin-left: 45px">
         Ob0 - Disables inlining of user-defined functions. Note that 
               statement functions are always inlined.</p>
         <p style="text-indent: -45px;margin-left: 45px">
         Ob1 - Enables inlining when an inline keyword or an inline 
               attribute is specified. Also enables inlining according 
               to the C++ language.</p>
         <p style="text-indent: -45px;margin-left: 45px">
         Ob2 - Enables inlining of any function at the compiler's 
               discretion. </p>
   ]]> 
  
</flag>

<flag name="f-Gy" class="optimization" regexp="-Gy(?=\s|$)">

   <![CDATA[
      <p>This option tells the compiler to separate functions into COMDATs 
      for the linker.</p>
   ]]> 
     
</flag>

<flag name="f-GF" class="optimization" regexp="-GF(?=\s|$)">
      This option enables read only string-pooling optimization.   
</flag>

<flag name="f-Gf" class="optimization" regexp="-Gf(?=\s|$)">
      This option enables read/write string-pooling optimization.    
</flag>

<flag name="f-Gs" class="optimization" regexp="-Gs(?=\s|$)">

   <![CDATA[
      <p>This option disables stack-checking for routines with 4096 bytes 
      of local variables and compiler temporaries.</p>
   ]]> 
     
</flag>


</flagsdescription>

